{"version":3,"sources":["serviceWorker.js","components/molecules/Card.js","components/organisms/CardList.js","store/types/index.js","store/actions/index.js","components/atmos/Search.js","components/organisms/Scroll.js","components/atmos/Header.js","containers/App.js","store/reducers/index.js","api/index.js","store/sagas/index.js","store/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","searchTerm","useSelector","state","filteredRobots","robots","filter","robot","toLowerCase","includes","map","key","FETCH_ROBOTS_START","setSearch","type","payload","fetchRobotsStart","fetchRobotsSuccess","fetchRobotsFailure","errorMessage","Search","dispatch","useDispatch","placeholder","value","onChange","e","target","Scroll","children","Header","App","isFetching","useEffect","INITIAL_STATE","fetchRobots","axios","get","fetchRobotsAsync","onFetchRobotsStart","call","res","put","data","takeEvery","sagaMiddleware","createSagaMiddleware","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCJSC,MAZf,YAAkC,IAAnBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MACvB,OACI,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,6BACE,4BAAKJ,GACL,2BAAIC,MCeCI,MAlBf,WAEE,IAAMC,EAAaC,YAAY,SAAAC,GAAK,OAAIA,EAAMF,aAIxCG,EAFSF,YAAY,SAAAC,GAAK,OAAIA,EAAME,SAEZC,OAC1B,SAAAC,GAAK,OAAIA,EAAMZ,KAAKa,cAAcC,SAASR,EAAWO,iBAE1D,OACI,6BACGJ,EAAeM,IACZ,gBAAEhB,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAZ,OAAuB,kBAAC,EAAD,CAAMe,IAAKjB,EAAIA,GAAIA,EAAIC,KAAMA,EACvBC,MAAOA,QCjBnCgB,EAAqB,qBCKrBC,EAAY,SAAAZ,GAAU,MAAK,CACtCa,KDPiC,sBCQjCC,QAASd,IAGEe,EAAmB,iBAAO,CACrCF,KAAMF,IAGKK,EAAqB,SAAAZ,GAAM,MAAK,CAC3CS,KDdkC,uBCelCC,QAASV,IAGEa,EAAqB,SAAAC,GAAY,MAAK,CACjDL,KDlB+B,oBCmB/BC,QAASI,ICHIC,MAff,WAEE,IAAMnB,EAAaC,YAAY,SAAAC,GAAK,OAAIA,EAAMF,aAExCoB,EAAWC,cAEjB,OACI,yBAAKzB,UAAU,OACb,2BAAOA,UAAU,gCAAgCiB,KAAK,SAC/CS,YAAY,gBAAgBC,MAAOvB,EACnCwB,SAAU,SAAAC,GAAC,OAAIL,EAASR,EAAUa,EAAEC,OAAOH,a,MCJ3CI,MARf,YAA6B,IAAZC,EAAW,EAAXA,SACf,OACI,yBAAKhC,UAAU,UACZgC,ICDMC,EAFA,kBAAM,wBAAIjC,UAAU,MAAd,gBC+BNkC,MAtBf,WAEE,IAAMC,EAAa9B,YAAY,SAAAC,GAAK,OAAIA,EAAM6B,aAExCX,EAAWC,cAMjB,OAJAW,oBAAU,WACRZ,EAASL,MACR,CAACK,IAGCW,GAAc,wBAAInC,UAAU,MAAd,eACf,yBAAKA,UAAU,MACb,kBAAC,EAAD,MACA,kBAAE,EAAF,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,S,klBCrBV,IAAMqC,EAAgB,CACpBjC,WAAY,GACZI,OAAQ,GACR2B,YAAY,EACZb,aAAc,I,0CCRD,SAASgB,IACtB,OAAOC,IAAMC,IAAI,8C,eCGTC,G,WAUOC,GAVjB,SAAUD,IAAV,sEAEgB,OAFhB,kBAEsBE,YAAKL,GAF3B,OAGI,OADMM,EAFV,gBAGUC,YAAIzB,EAAmBwB,EAAIE,OAHrC,8BAMI,OANJ,mCAMUD,YAAIxB,EAAmB,EAAD,KANhC,oDAUO,SAAUqB,IAAV,gEACL,OADK,SACCK,YAAUhC,EAAoB0B,GAD/B,sCCTP,IAAMO,EAAiBC,cAEjBC,EAAa,CAACF,GAIpB,IAAMG,EAAmB3D,OAAO4D,sCAAwCC,IAClEC,EAAQC,YHDkB,WAA6C,IAA5CjD,EAA2C,uDAAnC+B,EAAmC,yCAAnBpB,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAC7D,OAAQD,GACN,INf+B,sBMgB7B,OAAO,EAAP,GACKX,EADL,CAEEF,WAAYc,IAEhB,KAAKH,EACH,OAAO,EAAP,GACKT,EADL,CAEE6B,YAAY,IAEhB,INvBgC,uBMwB9B,OAAO,EAAP,GACK7B,EADL,CAEE6B,YAAY,EACZ3B,OAAQU,IAEZ,IN5B6B,oBM6B3B,OAAO,EAAP,GACKZ,EADL,CAEE6B,YAAY,EACZb,aAAcJ,IAElB,QACE,OAAOZ,IGxB+B6C,EACxCK,IAAe,WAAf,EAAmBN,KAGvBF,EAAeS,IAAIf,GAEJY,QCXfI,SACI,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OACWK,SAASC,eAAe,SbqHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.042c5e0b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nfunction Card({id, name, email}) {\n  return (\n      <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img src={`https://robohash.org/${id}?200x200`} alt='Robots' />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport Card from '../molecules/Card';\n\nfunction CardList() {\n\n  const searchTerm = useSelector(state => state.searchTerm);\n\n  const robots = useSelector(state => state.robots);\n\n  const filteredRobots = robots.filter(\n      robot => robot.name.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  return (\n      <div>\n        {filteredRobots.map(\n            ({id, name, email}) => <Card key={id} id={id} name={name}\n                                         email={email} />)}\n      </div>\n  );\n}\n\nexport default CardList;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const FETCH_ROBOTS_START = 'FETCH_ROBOTS_START';\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\nexport const FETCH_ROBOTS_FAIL = 'FETCH_ROBOTS_FAIL';","import {\n  CHANGE_SEARCH_FIELD, FETCH_ROBOTS_FAIL,\n  FETCH_ROBOTS_START,\n  FETCH_ROBOTS_SUCCESS,\n} from '../types';\n\nexport const setSearch = searchTerm => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: searchTerm,\n});\n\nexport const fetchRobotsStart = () => ({\n  type: FETCH_ROBOTS_START,\n});\n\nexport const fetchRobotsSuccess = robots => ({\n  type: FETCH_ROBOTS_SUCCESS,\n  payload: robots,\n});\n\nexport const fetchRobotsFailure = errorMessage => ({\n  type: FETCH_ROBOTS_FAIL,\n  payload: errorMessage,\n});","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {setSearch} from '../../store/actions';\n\nfunction Search() {\n\n  const searchTerm = useSelector(state => state.searchTerm);\n\n  const dispatch = useDispatch();\n\n  return (\n      <div className='pa2'>\n        <input className='pa3 ba b--green bg-light-blue' type='search'\n               placeholder='Search Robots' value={searchTerm}\n               onChange={e => dispatch(setSearch(e.target.value))} />\n      </div>\n  );\n}\n\nexport default Search;","import React from 'react';\n\nfunction Scroll({children}) {\n  return (\n      <div className='scroll'>\n        {children}\n      </div>\n  );\n}\n\nexport default Scroll;","import React from 'react';\n\nconst Header = () => <h1 className='f1'>RoboFriends</h1>;\n\nexport default Header;\n","import React, {useEffect} from 'react';\nimport 'tachyons';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport CardList from '../components/organisms/CardList';\nimport Search from '../components/atmos/Search';\nimport './App.css';\nimport Scroll from '../components/organisms/Scroll';\nimport {fetchRobotsStart} from '../store/actions';\nimport Header from '../components/atmos/Header';\n\nfunction App() {\n\n  const isFetching = useSelector(state => state.isFetching);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchRobotsStart());\n  }, [dispatch]);\n\n  return (\n      (isFetching && <h1 className='f1'>Loading...</h1>) ||\n      <div className='tc'>\n        <Header />\n        < Search />\n        <Scroll>\n          <CardList />\n        </Scroll>\n      </div>\n  );\n}\n\nexport default App;","import {\n  CHANGE_SEARCH_FIELD, FETCH_ROBOTS_FAIL,\n  FETCH_ROBOTS_START,\n  FETCH_ROBOTS_SUCCESS,\n} from '../types';\n\nconst INITIAL_STATE = {\n  searchTerm: '',\n  robots: [],\n  isFetching: false,\n  errorMessage: '',\n};\n\nexport const setSearchReducer = (state = INITIAL_STATE, {type, payload}) => {\n  switch (type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchTerm: payload,\n      };\n    case FETCH_ROBOTS_START:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case FETCH_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        robots: payload,\n      };\n    case FETCH_ROBOTS_FAIL:\n      return {\n        ...state,\n        isFetching: false,\n        errorMessage: payload,\n      };\n    default:\n      return state;\n  }\n};","import axios from 'axios';\n\nexport default function fetchRobots() {\n  return axios.get('https://jsonplaceholder.typicode.com/users');\n}","import {takeEvery, call, put} from 'redux-saga/effects';\n\nimport {FETCH_ROBOTS_START} from '../types';\nimport {fetchRobotsFailure, fetchRobotsSuccess} from '../actions';\nimport fetchRobots from '../../api';\n\nfunction* fetchRobotsAsync() {\n  try {\n    const res = yield call(fetchRobots);\n    yield put(fetchRobotsSuccess(res.data));\n\n  } catch (e) {\n    yield put(fetchRobotsFailure(e));\n  }\n}\n\nexport function* onFetchRobotsStart() {\n  yield takeEvery(FETCH_ROBOTS_START, fetchRobotsAsync);\n}\n","import {applyMiddleware, compose, createStore} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport {setSearchReducer} from './reducers';\nimport {onFetchRobotsStart} from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') middleware.push(logger);\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(setSearchReducer, composeEnhancers(\n    applyMiddleware(...middleware),\n));\n\nsagaMiddleware.run(onFetchRobotsStart);\n\nexport default store;","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}